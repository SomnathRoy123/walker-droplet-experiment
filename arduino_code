#include <Wire.h>
#include <time.h>

int M1 = 0x68;
int M2 = 0x69;

float Ax1, Ay1, Az1;
float Ax2, Ay2, Az2;
unsigned long T1, T2;
float scale = 4096.0;

void setup() {
  Serial.begin(1000000);
  Wire.begin();
  Wire.setClock(1000000);

  Wire.beginTransmission(M1);  // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B);            // PWR_MGMT_1 register
  Wire.write(0);               // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(false);

  Wire.beginTransmission(M1);  // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B);            // PWR_MGMT_1 register
  Wire.write(0x8);             // set to zero (wakes up the MPU-6050) and disables temperature sensor
  Wire.endTransmission(false);

  Wire.beginTransmission(M1);
  Wire.write(0x6C);  // PWR_MGMT_2 register
  Wire.write(0x7);   // Disable Gyroscope
  Wire.endTransmission(false);

  // Configure Accelerometer Sensitivity - Full Scale Range (default +/- 2g)
  Wire.beginTransmission(M1);
  Wire.write(0x1C);  //Talk to the ACCEL_CONFIG register (1C hex)
  Wire.write(0x10);  //Set the register bits as 00010000 (+/- 16g full scale range)
  Wire.endTransmission(true);

  Wire.beginTransmission(M2);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0x8);   // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(false);

  Wire.beginTransmission(M2);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0x8);   // set to zero (wakes up the MPU-6050) and disables temperature sensor
  Wire.endTransmission(false);

  Wire.beginTransmission(M2);
  Wire.write(0x6C);  // PWR_MGMT_2 register
  Wire.write(0x7);   // Disable Gyroscope
  Wire.endTransmission(false);

  // Configure Accelerometer Sensitivity - Full Scale Range (default +/- 2g)
  Wire.beginTransmission(M2);
  Wire.write(0x1C);  //Talk to the ACCEL_CONFIG register (1C hex)
  Wire.write(0x10);  //Set the register bits as 00010000 (+/- 16g full scale range)
  Wire.endTransmission(true);
}

void loop() {
  Wire.beginTransmission(M1);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(M1, 6);
  if (Wire.available() <= 6) {
    // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
    Ax1 = (Wire.read() << 8 | Wire.read()) / scale;  // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
    Ay1 = (Wire.read() << 8 | Wire.read()) / scale;  // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
    Az1 = (Wire.read() << 8 | Wire.read()) / scale;  // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  }
  T1 = micros();
  Serial.print(T1);
  Serial.print(",");
  Serial.print(Ax1);
  Serial.print(",");
  Serial.print(Ay1);
  Serial.print(",");
  Serial.print(Az1);
  Serial.print(",");

  Wire.beginTransmission(M2);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(M2, 6);
  if (Wire.available() <= 6) {
    // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
    Ax2 = (Wire.read() << 8 | Wire.read()) / scale;  // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
    Ay2 = (Wire.read() << 8 | Wire.read()) / scale;  // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
    Az2 = (Wire.read() << 8 | Wire.read()) / scale;  // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  }
  T2 = micros();
  Serial.print(T2);
  Serial.print(",");
  Serial.print(Ax2);
  Serial.print(",");
  Serial.print(Ay2);
  Serial.print(",");
  Serial.println(Az2);
}
